Dateiname: Nodes\ApiNode.vue
// resources/js/views/Pages/Workflows/Nodes/ApiNode.vue
<script setup>
import { ref } from 'vue';
import { Handle, Position, useVueFlow } from '@vue-flow/core';

// Props receiving data from the workflow editor
const props = defineProps({
  id: {
    type: String,
    required: true
  },
  data: {
    type: Object,
    required: true
  },
  selected: {
    type: Boolean,
    default: false
  },
  isConnectable: {
    type: Boolean,
    default: true
  }
});

// Get Vue Flow methods
const { findNode, setNodes } = useVueFlow();

// Node configuration
const config = ref({
  showSettings: false,
  bodyType: props.data.bodyType || 'json',
  newHeaderKey: '',
  newHeaderValue: '',
  availableMethods: [
    'GET', 'POST', 'PUT', 'PATCH', 'DELETE'
  ]
});

// Toggle settings panel
const toggleSettings = () => {
  config.value.showSettings = !config.value.showSettings;
};

// Update node data
const updateNodeData = (key, value) => {
  const node = findNode(props.id);
  if (!node) return;

  const newNode = {
    ...node,
    data: {
      ...node.data,
      [key]: value
    }
  };

  setNodes((nodes) => nodes.map(n => n.id === props.id ? newNode : n));
};

// Add a header
const addHeader = () => {
  if (!config.value.newHeaderKey) return;

  const headers = { ...(props.data.headers || {}) };
  headers[config.value.newHeaderKey] = config.value.newHeaderValue;

  updateNodeData('headers', headers);

  config.value.newHeaderKey = '';
  config.value.newHeaderValue = '';
};

// Remove a header
const removeHeader = (key) => {
  const headers = { ...(props.data.headers || {}) };
  delete headers[key];

  updateNodeData('headers', headers);
};

// Update body type
const updateBodyType = (type) => {
  config.value.bodyType = type;
  updateNodeData('bodyType', type);

  // Initialize body based on type if it doesn't exist
  if (!props.data.body) {
    if (type === 'json') {
      updateNodeData('body', '{}');
    } else if (type === 'form') {
      updateNodeData('body', {});
    } else {
      updateNodeData('body', '');
    }
  }
};
</script>

<template>
  <div :class="['api-node', { 'selected': selected }]">
    <!-- Target Handle (Input) -->
    <Handle
      type="target"
      position="top"
      :id="id + '-target'"
      :connectable="isConnectable"
    />

    <!-- Source Handle (Output) -->
    <Handle
      type="source"
      position="bottom"
      :id="id + '-source'"
      :connectable="isConnectable"
    />

    <!-- Node Content -->
    <div class="api-node-content">
      <div class="api-node-header">
        <i class="fa fa-globe text-danger me-1"></i>
        <span class="api-node-label">{{ data.label }}</span>
        <button
          type="button"
          class="api-node-toggle"
          @click="toggleSettings"
          :title="config.showSettings ? 'Hide settings' : 'Show settings'"
        >
          <i :class="['fa', config.showSettings ? 'fa-chevron-up' : 'fa-chevron-down']"></i>
        </button>
      </div>

      <!-- Setting Panel -->
      <div v-if="config.showSettings" class="api-node-settings">
        <!-- URL -->
        <div class="setting-group">
          <label class="setting-label">URL</label>
          <div class="setting-option">
            <input
              type="text"
              class="form-control form-control-sm"
              v-model="data.url"
              placeholder="https://api.example.com/endpoint"
              @change="updateNodeData('url', data.url)"
            />
          </div>
          <div class="setting-help">API endpoint URL. Use {{variable}} for dynamic values.</div>
        </div>

        <!-- Method -->
        <div class="setting-group">
          <label class="setting-label">Method</label>
          <div class="setting-option">
            <select
              class="form-select form-select-sm"
              v-model="data.method"
              @change="updateNodeData('method', data.method)"
            >
              <option v-for="method in config.availableMethods" :key="method" :value="method">
                {{ method }}
              </option>
            </select>
          </div>
        </div>

        <!-- Headers -->
        <div class="setting-group">
          <label class="setting-label">Headers</label>
          <div class="setting-option">
            <div class="api-headers-list">
              <div
                v-for="(value, key) in data.headers"
                :key="key"
                class="api-header-item"
              >
                <span class="api-header-key">{{ key }}</span>
                <span class="api-header-value">{{ value }}</span>
                <button
                  type="button"
                  class="api-header-remove"
                  @click="removeHeader(key)"
                  title="Remove header"
                >
                  <i class="fa fa-times"></i>
                </button>
              </div>
              <div v-if="!data.headers || Object.keys(data.headers).length === 0" class="api-no-headers">
                No headers defined
              </div>
            </div>
          </div>

          <!-- Add Header -->
          <div class="setting-option mt-1">
            <div class="row g-1">
              <div class="col-5">
                <input
                  type="text"
                  class="form-control form-control-sm"
                  v-model="config.newHeaderKey"
                  placeholder="Key"
                />
              </div>
              <div class="col-5">
                <input
                  type="text"
                  class="form-control form-control-sm"
                  v-model="config.newHeaderValue"
                  placeholder="Value"
                />
              </div>
              <div class="col-2">
                <button
                  type="button"
                  class="btn btn-sm btn-outline-secondary w-100"
                  @click="addHeader"
                  :disabled="!config.newHeaderKey"
                >
                  <i class="fa fa-plus"></i>
                </button>
              </div>
            </div>
          </div>
        </div>

        <!-- Body -->
        <div class="setting-group">
          <label class="setting-label">Body</label>
          <div class="setting-option mb-1">
            <div class="btn-group btn-group-sm w-100">
              <button
                type="button"
                class="btn"
                :class="config.bodyType === 'json' ? 'btn-danger' : 'btn-outline-secondary'"
                @click="updateBodyType('json')"
              >
                JSON
              </button>
              <button
                type="button"
                class="btn"
                :class="config.bodyType === 'text' ? 'btn-danger' : 'btn-outline-secondary'"
                @click="updateBodyType('text')"
              >
                Text
              </button>
              <button
                type="button"
                class="btn"
                :class="config.bodyType === 'form' ? 'btn-danger' : 'btn-outline-secondary'"
                @click="updateBodyType('form')"
              >
                Form
              </button>
            </div>
          </div>
          <div class="setting-option">
            <textarea
              class="form-control form-control-sm"
              v-model="data.body"
              rows="3"
              placeholder="Request body"
              @change="updateNodeData('body', data.body)"
            ></textarea>
          </div>
          <div class="setting-help">Request body. Use {{variable}} for dynamic values.</div>
        </div>

        <!-- Output Variable -->
        <div class="setting-group">
          <label class="setting-label">Save Response To</label>
          <div class="setting-option">
            <input
              type="text"
              class="form-control form-control-sm"
              v-model="data.output_variable"
              placeholder="Variable name"
              @change="updateNodeData('output_variable', data.output_variable)"
            />
          </div>
          <div class="setting-help">Variable to store the API response</div>
        </div>
      </div>

      <!-- Node Summary (when collapsed) -->
      <div v-else class="api-node-summary">
        <div class="api-method-url">
          <span class="api-method" :class="`method-${data.method?.toLowerCase()}`">{{ data.method }}</span>
          <span class="api-url">{{ data.url }}</span>
        </div>
        <div class="api-details">
          <span v-if="data.headers && Object.keys(data.headers).length > 0" class="api-header-count">{{ Object.keys(data.headers).length }} headers</span>
          <span v-if="data.output_variable" class="api-output-var">â†’ {{ data.output_variable }}</span>
        </div>
      </div>
    </div>
  </div>
</template>

<style scoped>
.api-node {
  min-width: 200px;
  max-width: 280px;
  background-color: #ffffff;
  border: 2px solid #e84a5f;
  border-radius: 5px;
  font-size: 12px;
  overflow: hidden;
}

.api-node.selected {
  box-shadow: 0 0 0 2px #e84a5f;
}

.api-node-content {
  padding: 5px;
}

.api-node-header {
  display: flex;
  align-items: center;
  font-weight: bold;
  padding: 4px;
  background-color: rgba(232, 74, 95, 0.1);
  border-bottom: 1px solid rgba(232, 74, 95, 0.2);
}

.api-node-label {
  flex-grow: 1;
  margin-right: 5px;
}

.api-node-toggle {
  background: none;
  border: none;
  cursor: pointer;
  padding: 0;
  width: 16px;
  height: 16px;
  display: flex;
  align-items: center;
  justify-content: center;
  color: #e84a5f;
}

.api-node-settings {
  padding: 8px;
  font-size: 11px;
}

.setting-group {
  margin-bottom: 8px;
}

.setting-label {
  font-weight: 600;
  margin-bottom: 2px;
  font-size: 10px;
  text-transform: uppercase;
  color: #6c757d;
}

.setting-option {
  margin-bottom: 2px;
}

.setting-help {
  font-size: 10px;
  color: #6c757d;
  font-style: italic;
}

.api-headers-list {
  max-height: 80px;
  overflow-y: auto;
  border: 1px solid #dee2e6;
  border-radius: 3px;
  padding: 4px;
  background-color: #f8f9fa;
  font-size: 10px;
}

.api-header-item {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 2px 4px;
  border-radius: 3px;
  margin-bottom: 2px;
  background-color: rgba(232, 74, 95, 0.05);
}

.api-header-key {
  font-weight: 500;
  color: #e84a5f;
}

.api-header-value {
  color: #6c757d;
  margin-left: 4px;
  flex-grow: 1;
  text-align: center;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  max-width: 80px;
}

.api-header-remove {
  background: none;
  border: none;
  padding: 0;
  width: 14px;
  height: 14px;
  font-size: 8px;
  color: #dc3545;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
}

.api-no-headers {
  font-style: italic;
  color: #6c757d;
  font-size: 10px;
  padding: 2px 4px;
}

.api-node-summary {
  padding: 5px;
  font-size: 11px;
}

.api-method-url {
  display: flex;
  align-items: center;
  gap: 4px;
  margin-bottom: 2px;
}

.api-method {
  font-weight: bold;
  padding: 0 4px;
  border-radius: 3px;
  font-size: 10px;
}

.method-get {
  background-color: #cfe2ff;
  color: #0d6efd;
}

.method-post {
  background-color: #d1e7dd;
  color: #198754;
}

.method-put {
  background-color: #fff3cd;
  color: #ffc107;
}

.method-patch {
  background-color: #f8d7da;
  color: #dc3545;
}

.method-delete {
  background-color: #f8d7da;
  color: #dc3545;
}

.api-url {
  flex-grow: 1;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  font-size: 10px;
  color: #6c757d;
}

.api-details {
  display: flex;
  justify-content: space-between;
  font-size: 10px;
}

.api-header-count {
  color: #6c757d;
}

.api-output-var {
  color: #e84a5f;
  font-weight: 500;
}
</style>



Dateiname: Nodes\ConditionNode.vue
// resources/js/views/Pages/Workflows/Nodes/ConditionNode.vue
<script setup>
import { ref, computed } from 'vue';
import { Handle, Position, useVueFlow } from '@vue-flow/core';

// Props receiving data from the workflow editor
const props = defineProps({
  id: {
    type: String,
    required: true
  },
  data: {
    type: Object,
    required: true
  },
  selected: {
    type: Boolean,
    default: false
  },
  isConnectable: {
    type: Boolean,
    default: true
  }
});

// Get Vue Flow methods
const { findNode, setNodes, getNodes } = useVueFlow();

// Node configuration
const config = ref({
  showSettings: false
});

// Toggle settings panel
const toggleSettings = () => {
  config.value.showSettings = !config.value.showSettings;
};

// Available variables in the workflow
const availableVariables = computed(() => {
  // Get all nodes in the workflow
  const nodes = getNodes.value;
  const variables = [];

  // Extract variables from nodes
  nodes.forEach(node => {
    if (node.data) {
      // From input nodes
      if (node.data.type === 'input' && node.data.variable) {
        variables.push(node.data.variable);
      }

      // From prompt nodes
      if (node.data.type === 'prompt' && node.data.output_variable) {
        variables.push(node.data.output_variable);
      }

      // From API nodes
      if (node.data.type === 'api' && node.data.output_variable) {
        variables.push(node.data.output_variable);
      }

      // From transform nodes
      if (node.data.type === 'transform' && node.data.output_variable) {
        variables.push(node.data.output_variable);
      }
    }
  });

  // Return unique variables
  return [...new Set(variables)];
});

// Update node data
const updateNodeData = (key, value) => {
  const node = findNode(props.id);
  if (!node) return;

  const newNode = {
    ...node,
    data: {
      ...node.data,
      [key]: value
    }
  };

  setNodes((nodes) => nodes.map(n => n.id === props.id ? newNode : n));
};

// Insert variable into condition
const insertVariable = (variable) => {
  const currentCondition = props.data.condition || '';
  updateNodeData('condition', currentCondition + ' {{' + variable + '}} ');
};

// Condition examples for quick start
const conditionExamples = [
  {
    label: 'Contains text',
    condition: '{{variable}}.toLowerCase().includes("text")'
  },
  {
    label: 'Equals value',
    condition: '{{variable}} === "value"'
  },
  {
    label: 'Greater than',
    condition: 'parseFloat({{variable}}) > 10'
  },
  {
    label: 'Is empty',
    condition: '!{{variable}} || {{variable}}.trim() === ""'
  },
  {
    label: 'JSON has property',
    condition: 'typeof JSON.parse({{variable}}).property !== "undefined"'
  }
];

// Apply a condition example
const applyExample = (example) => {
  updateNodeData('condition', example.condition);
};
</script>

<template>
  <div :class="['condition-node', { 'selected': selected }]">
    <!-- Target Handle (Input) -->
    <Handle
      type="target"
      position="top"
      :id="id + '-target'"
      :connectable="isConnectable"
    />

    <!-- Source Handle (True output) -->
    <Handle
      type="source"
      position="bottom"
      :id="id + '-source-true'"
      :connectable="isConnectable"
      class="source-true"
    />

    <!-- Source Handle (False output) -->
    <Handle
      type="source"
      position="right"
      :id="id + '-source-false'"
      :connectable="isConnectable"
      class="source-false"
    />

    <!-- Node Content -->
    <div class="condition-node-content">
      <div class="condition-node-header node-drag-handle
">
        <i class="fa fa-code-branch text-warning me-1"></i>
        <span class="condition-node-label">{{ data.label }}</span>
        <button
          type="button"
          class="condition-node-toggle"
          @click="toggleSettings"
          :title="config.showSettings ? 'Hide settings' : 'Show settings'"
        >
          <i :class="['fa', config.showSettings ? 'fa-chevron-up' : 'fa-chevron-down']"></i>
        </button>
      </div>

      <!-- Setting Panel -->
      <div v-if="config.showSettings" class="condition-node-settings">
        <!-- Condition Expression -->
        <div class="setting-group">
          <label class="setting-label">Condition Expression</label>
          <div class="setting-option">
            <textarea
              class="form-control form-control-sm"
              v-model="data.condition"
              rows="3"
              placeholder="Enter a JavaScript condition"
              @change="updateNodeData('condition', data.condition)"
            ></textarea>
          </div>
          <div class="setting-help">JavaScript expression to evaluate. Use {{variable}} for workflow variables.</div>
        </div>

        <!-- Available Variables -->
        <div class="setting-group">
          <label class="setting-label">Available Variables</label>
          <div class="setting-option">
            <div class="condition-variables-list">
              <button
                v-for="variable in availableVariables"
                :key="variable"
                type="button"
                class="condition-variable-btn"
                @click="insertVariable(variable)"
              >
                {{ variable }}
              </button>
              <div v-if="availableVariables.length === 0" class="condition-no-variables">
                No variables available
              </div>
            </div>
          </div>
        </div>

        <!-- Condition Examples -->
        <div class="setting-group">
          <label class="setting-label">Examples</label>
          <div class="setting-option">
            <div class="condition-examples-list">
              <button
                v-for="(example, index) in conditionExamples"
                :key="index"
                type="button"
                class="condition-example-btn"
                @click="applyExample(example)"
              >
                {{ example.label }}
              </button>
            </div>
          </div>
        </div>

        <!-- Path Labels -->
        <div class="setting-group">
          <div class="row g-1">
            <div class="col-6">
              <label class="setting-label">True Label</label>
              <div class="setting-option">
                <input
                  type="text"
                  class="form-control form-control-sm"
                  v-model="data.true_label"
                  placeholder="Yes"
                  @change="updateNodeData('true_label', data.true_label)"
                />
              </div>
            </div>
            <div class="col-6">
              <label class="setting-label">False Label</label>
              <div class="setting-option">
                <input
                  type="text"
                  class="form-control form-control-sm"
                  v-model="data.false_label"
                  placeholder="No"
                  @change="updateNodeData('false_label', data.false_label)"
                />
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Node Summary (when collapsed) -->
      <div v-else class="condition-node-summary">
        <div class="condition-expr">
          {{ data.condition || 'No condition' }}
        </div>
        <div class="condition-paths">
          <div class="condition-path-true">â†“ {{ data.true_label || 'True' }}</div>
          <div class="condition-path-false">â†’ {{ data.false_label || 'False' }}</div>
        </div>
      </div>
    </div>
  </div>
</template>

<style scoped>
.condition-node {
  min-width: 200px;
  max-width: 280px;
  background-color: #ffffff;
  border: 2px solid #db9038;
  border-radius: 5px;
  font-size: 12px;
  overflow: hidden;
  position: relative;
}

.condition-node.selected {
  box-shadow: 0 0 0 2px #db9038;
}

.source-true {
  background-color: #28a745 !important;
}

.source-false {
  background-color: #dc3545 !important;
}

.condition-node-content {
  padding: 5px;
}

.condition-node-header {
  display: flex;
  align-items: center;
  font-weight: bold;
  padding: 4px;
  background-color: rgba(219, 144, 56, 0.1);
  border-bottom: 1px solid rgba(219, 144, 56, 0.2);
}

.condition-node-label {
  flex-grow: 1;
  margin-right: 5px;
}

.condition-node-toggle {
  background: none;
  border: none;
  cursor: pointer;
  padding: 0;
  width: 16px;
  height: 16px;
  display: flex;
  align-items: center;
  justify-content: center;
  color: #db9038;
}

.condition-node-settings {
  padding: 8px;
  font-size: 11px;
}

.setting-group {
  margin-bottom: 8px;
}

.setting-label {
  font-weight: 600;
  margin-bottom: 2px;
  font-size: 10px;
  text-transform: uppercase;
  color: #6c757d;
}

.setting-option {
  margin-bottom: 2px;
}

.setting-help {
  font-size: 10px;
  color: #6c757d;
  font-style: italic;
}

.condition-variables-list {
  display: flex;
  flex-wrap: wrap;
  gap: 4px;
  max-height: 60px;
  overflow-y: auto;
  padding: 4px;
  background-color: #f8f9fa;
  border: 1px solid #dee2e6;
  border-radius: 3px;
}

.condition-variable-btn {
  font-size: 10px;
  padding: 0 6px;
  height: 20px;
  background-color: #e9ecef;
  border: 1px solid #dee2e6;
  border-radius: 3px;
  color: #495057;
  cursor: pointer;
}

.condition-variable-btn:hover {
  background-color: #dee2e6;
}

.condition-no-variables {
  font-style: italic;
  color: #6c757d;
  font-size: 10px;
  padding: 2px 4px;
}

.condition-examples-list {
  display: flex;
  flex-wrap: wrap;
  gap: 4px;
  padding: 4px;
}

.condition-example-btn {
  font-size: 10px;
  padding: 0 6px;
  height: 20px;
  background-color: rgba(219, 144, 56, 0.1);
  border: 1px solid rgba(219, 144, 56, 0.2);
  border-radius: 3px;
  color: #db9038;
  cursor: pointer;
}

.condition-example-btn:hover {
  background-color: rgba(219, 144, 56, 0.2);
}

.condition-node-summary {
  padding: 5px;
  font-size: 11px;
}

.condition-expr {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  font-family: monospace;
  font-size: 10px;
  color: #495057;
  padding: 4px;
  background-color: #f8f9fa;
  border-radius: 3px;
  border: 1px solid #dee2e6;
  margin-bottom: 4px;
}

.condition-paths {
  display: flex;
  justify-content: space-between;
  margin-top: 4px;
}

.condition-path-true,
.condition-path-false {
  font-size: 10px;
  font-weight: 500;
}

.condition-path-true {
  color: #28a745;
}

.condition-path-false {
  color: #dc3545;
}
</style>



Dateiname: Nodes\InputNode.vue
// resources/js/views/Pages/Workflows/Nodes/InputNode.vue
<script setup>
import { ref } from 'vue';
import { Handle, Position, useVueFlow } from '@vue-flow/core';

// Props receiving data from the workflow editor
const props = defineProps({
  id: {
    type: String,
    required: true
  },
  data: {
    type: Object,
    required: true
  },
  selected: {
    type: Boolean,
    default: false
  },
  isConnectable: {
    type: Boolean,
    default: true
  }
});

// Get Vue Flow methods
const { findNode, setNodes } = useVueFlow();

// Node configuration
const config = ref({
  showSettings: false
});

// Toggle settings panel
const toggleSettings = () => {
  config.value.showSettings = !config.value.showSettings;
};

// Update node data
const updateNodeData = (key, value) => {
  const node = findNode(props.id);
  if (!node) return;

  const newNode = {
    ...node,
    data: {
      ...node.data,
      [key]: value
    }
  };

  setNodes((nodes) => nodes.map(n => n.id === props.id ? newNode : n));
};
</script>

<template>
  <div :class="['input-node', { 'selected': selected }]">
    <!-- Source Handle (Output) -->
    <Handle
      type="source"
      position="bottom"
      :id="id + '-source'"
      :connectable="isConnectable"
    />

    <!-- Node Content -->
    <div class="input-node-content">
      <div class="input-node-header node-drag-handle
">
        <i class="fa fa-sign-in-alt text-info me-1"></i>
        <span class="input-node-label">{{ data.label }}</span>
        <button
          type="button"
          class="input-node-toggle"
          @click="toggleSettings"
          :title="config.showSettings ? 'Hide settings' : 'Show settings'"
        >
          <i :class="['fa', config.showSettings ? 'fa-chevron-up' : 'fa-chevron-down']"></i>
        </button>
      </div>

      <!-- Setting Panel -->
      <div v-if="config.showSettings" class="input-node-settings">
        <!-- Variable Name -->
        <div class="setting-group">
          <label class="setting-label">Variable Name</label>
          <div class="setting-option">
            <input
              type="text"
              class="form-control form-control-sm"
              v-model="data.variable"
              placeholder="Enter variable name"
              @change="updateNodeData('variable', data.variable)"
            />
          </div>
          <div class="setting-help">This variable will be available in your workflow</div>
        </div>

        <!-- Default Value -->
        <div class="setting-group">
          <label class="setting-label">Default Value (optional)</label>
          <div class="setting-option">
            <textarea
              class="form-control form-control-sm"
              v-model="data.default_value"
              rows="2"
              placeholder="Enter default value (if any)"
              @change="updateNodeData('default_value', data.default_value)"
            ></textarea>
          </div>
          <div class="setting-help">Used when no input is provided</div>
        </div>

        <!-- Description -->
        <div class="setting-group">
          <label class="setting-label">Description (optional)</label>
          <div class="setting-option">
            <input
              type="text"
              class="form-control form-control-sm"
              v-model="data.description"
              placeholder="Describe this input"
              @change="updateNodeData('description', data.description)"
            />
          </div>
          <div class="setting-help">Helps users understand the purpose</div>
        </div>

        <!-- Required Toggle -->
        <div class="setting-group">
          <div class="setting-option">
            <div class="form-check">
              <input
                type="checkbox"
                class="form-check-input"
                id="input-required"
                v-model="data.required"
                @change="updateNodeData('required', data.required)"
              />
              <label class="form-check-label" for="input-required">Required Input</label>
            </div>
          </div>
        </div>
      </div>

      <!-- Node Summary (when collapsed) -->
      <div v-else class="input-node-summary">
        <div class="input-variable">{{ data.variable || 'unnamed' }}</div>
        <div v-if="data.default_value" class="input-default">Default: {{ data.default_value.substring(0, 15) }}{{ data.default_value.length > 15 ? '...' : '' }}</div>
        <div v-if="data.required" class="input-required">Required</div>
      </div>
    </div>
  </div>
</template>

<style scoped>
.input-node {
  min-width: 180px;
  max-width: 240px;
  background-color: #ffffff;
  border: 2px solid #26a9e0;
  border-radius: 5px;
  font-size: 12px;
  overflow: hidden;
}

.input-node.selected {
  box-shadow: 0 0 0 2px #26a9e0;
}

.input-node-content {
  padding: 5px;
}

.input-node-header {
  display: flex;
  align-items: center;
  font-weight: bold;
  padding: 4px;
  background-color: rgba(38, 169, 224, 0.1);
  border-bottom: 1px solid rgba(38, 169, 224, 0.2);
}

.input-node-label {
  flex-grow: 1;
  margin-right: 5px;
}

.input-node-toggle {
  background: none;
  border: none;
  cursor: pointer;
  padding: 0;
  width: 16px;
  height: 16px;
  display: flex;
  align-items: center;
  justify-content: center;
  color: #26a9e0;
}

.input-node-settings {
  padding: 8px;
  font-size: 11px;
}

.setting-group {
  margin-bottom: 8px;
}

.setting-label {
  font-weight: 600;
  margin-bottom: 2px;
  font-size: 10px;
  text-transform: uppercase;
  color: #6c757d;
}

.setting-option {
  margin-bottom: 2px;
}

.setting-help {
  font-size: 10px;
  color: #6c757d;
  font-style: italic;
}

.input-node-summary {
  padding: 5px;
  font-size: 11px;
  color: #6c757d;
}

.input-variable {
  font-weight: bold;
  color: #26a9e0;
}

.input-default {
  font-style: italic;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  margin-top: 2px;
}

.input-required {
  font-size: 10px;
  color: #e83e8c;
  margin-top: 2px;
}
</style>



Dateiname: Nodes\OutputNode.vue
// resources/js/views/Pages/Workflows/Nodes/OutputNode.vue
<script setup>
import { ref, computed } from 'vue';
import { Handle, Position, useVueFlow } from '@vue-flow/core';

// Props receiving data from the workflow editor
const props = defineProps({
  id: {
    type: String,
    required: true
  },
  data: {
    type: Object,
    required: true
  },
  selected: {
    type: Boolean,
    default: false
  },
  isConnectable: {
    type: Boolean,
    default: true
  }
});

// Get Vue Flow methods
const { findNode, setNodes, getNodes } = useVueFlow();

// Node configuration
const config = ref({
  showSettings: false,
  newVariable: ''
});

// Available variables in the workflow
const availableVariables = computed(() => {
  // Get all nodes in the workflow
  const nodes = getNodes.value;
  const variables = [];

  // Extract variables from nodes
  nodes.forEach(node => {
    if (node.data) {
      // From input nodes
      if (node.data.type === 'input' && node.data.variable) {
        variables.push(node.data.variable);
      }

      // From prompt nodes
      if (node.data.type === 'prompt' && node.data.output_variable) {
        variables.push(node.data.output_variable);
      }

      // From API nodes
      if (node.data.type === 'api' && node.data.output_variable) {
        variables.push(node.data.output_variable);
      }

      // From transform nodes
      if (node.data.type === 'transform' && node.data.output_variable) {
        variables.push(node.data.output_variable);
      }
    }
  });

  // Return unique variables
  return [...new Set(variables)];
});

// Toggle settings panel
const toggleSettings = () => {
  config.value.showSettings = !config.value.showSettings;
};

// Update node data
const updateNodeData = (key, value) => {
  const node = findNode(props.id);
  if (!node) return;

  const newNode = {
    ...node,
    data: {
      ...node.data,
      [key]: value
    }
  };

  setNodes((nodes) => nodes.map(n => n.id === props.id ? newNode : n));
};

// Add variable to output
const addVariable = () => {
  if (!config.value.newVariable) return;

  const variables = [...(props.data.variables || [])];

  if (!variables.includes(config.value.newVariable)) {
    variables.push(config.value.newVariable);
    updateNodeData('variables', variables);
  }

  config.value.newVariable = '';
};

// Remove variable from output
const removeVariable = (variable) => {
  const variables = [...(props.data.variables || [])];
  const index = variables.indexOf(variable);

  if (index !== -1) {
    variables.splice(index, 1);
    updateNodeData('variables', variables);
  }
};
</script>

<template>
  <div :class="['output-node', { 'selected': selected }]">
    <!-- Target Handle (Input) -->
    <Handle
      type="target"
      position="top"
      :id="id + '-target'"
      :connectable="isConnectable"
    />

    <!-- Node Content -->
    <div class="output-node-content">
      <div class="output-node-header node-drag-handle">
        <i class="fa fa-sign-out-alt text-success me-1"></i>
        <span class="output-node-label">{{ data.label }}</span>
        <button
          type="button"
          class="output-node-toggle"
          @click="toggleSettings"
          :title="config.showSettings ? 'Hide settings' : 'Show settings'"
        >
          <i :class="['fa', config.showSettings ? 'fa-chevron-up' : 'fa-chevron-down']"></i>
        </button>
      </div>

      <!-- Setting Panel -->
      <div v-if="config.showSettings" class="output-node-settings">
        <!-- Output Variables -->
        <div class="setting-group">
          <label class="setting-label">Output Variables</label>
          <div class="setting-option">
            <div class="output-variables-list">
              <div
                v-for="variable in data.variables"
                :key="variable"
                class="output-variable-item"
              >
                <span class="output-variable-name">{{ variable }}</span>
                <button
                  type="button"
                  class="output-variable-remove"
                  @click="removeVariable(variable)"
                  title="Remove variable"
                >
                  <i class="fa fa-times"></i>
                </button>
              </div>
              <div v-if="!data.variables || data.variables.length === 0" class="output-no-variables">
                No output variables selected
              </div>
            </div>
          </div>

          <!-- Add Variable -->
          <div class="setting-option mt-2">
            <div class="input-group input-group-sm">
              <select
                class="form-select form-select-sm"
                v-model="config.newVariable"
              >
                <option value="">Select a variable</option>
                <option
                  v-for="variable in availableVariables"
                  :key="variable"
                  :value="variable"
                >
                  {{ variable }}
                </option>
              </select>
              <button
                type="button"
                class="btn btn-sm btn-outline-success"
                @click="addVariable"
                :disabled="!config.newVariable"
              >
                <i class="fa fa-plus"></i>
              </button>
            </div>
          </div>

          <div class="setting-help">These variables will be included in the workflow result</div>
        </div>

        <!-- Format Options -->
        <div class="setting-group">
          <label class="setting-label">Output Format</label>
          <div class="setting-option">
            <select
              class="form-select form-select-sm"
              v-model="data.format"
              @change="updateNodeData('format', data.format)"
            >
              <option value="json">JSON</option>
              <option value="text">Plain Text</option>
              <option value="markdown">Markdown</option>
            </select>
          </div>
        </div>
      </div>

      <!-- Node Summary (when collapsed) -->
      <div v-else class="output-node-summary">
        <div class="output-variables">
          <span v-for="(variable, index) in data.variables" :key="variable">
            {{ variable }}{{ index < data.variables.length - 1 ? ', ' : '' }}
          </span>
          <span v-if="!data.variables || data.variables.length === 0" class="text-muted">No variables</span>
        </div>
        <div class="output-format">Format: {{ data.format || 'JSON' }}</div>
      </div>
    </div>
  </div>
</template>

<style scoped>
.output-node {
  min-width: 180px;
  max-width: 240px;
  background-color: #ffffff;
  border: 2px solid #42b983;
  border-radius: 5px;
  font-size: 12px;
  overflow: hidden;
}

.output-node.selected {
  box-shadow: 0 0 0 2px #42b983;
}

.output-node-content {
  padding: 5px;
}

.output-node-header {
  display: flex;
  align-items: center;
  font-weight: bold;
  padding: 4px;
  background-color: rgba(66, 185, 131, 0.1);
  border-bottom: 1px solid rgba(66, 185, 131, 0.2);
}

.output-node-label {
  flex-grow: 1;
  margin-right: 5px;
}

.output-node-toggle {
  background: none;
  border: none;
  cursor: pointer;
  padding: 0;
  width: 16px;
  height: 16px;
  display: flex;
  align-items: center;
  justify-content: center;
  color: #42b983;
}

.output-node-settings {
  padding: 8px;
  font-size: 11px;
}

.setting-group {
  margin-bottom: 8px;
}

.setting-label {
  font-weight: 600;
  margin-bottom: 2px;
  font-size: 10px;
  text-transform: uppercase;
  color: #6c757d;
}

.setting-option {
  margin-bottom: 2px;
}

.setting-help {
  font-size: 10px;
  color: #6c757d;
  font-style: italic;
}

.output-variables-list {
  max-height: 100px;
  overflow-y: auto;
  border: 1px solid #dee2e6;
  border-radius: 3px;
  padding: 4px;
  background-color: #f8f9fa;
}

.output-variable-item {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 2px 4px;
  border-radius: 3px;
  margin-bottom: 2px;
  background-color: rgba(66, 185, 131, 0.1);
}

.output-variable-name {
  font-weight: 500;
  color: #42b983;
}

.output-variable-remove {
  background: none;
  border: none;
  padding: 0;
  width: 14px;
  height: 14px;
  font-size: 8px;
  color: #dc3545;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
}

.output-no-variables {
  font-style: italic;
  color: #6c757d;
  font-size: 10px;
  padding: 2px 4px;
}

.output-node-summary {
  padding: 5px;
  font-size: 11px;
  color: #6c757d;
}

.output-variables {
  font-weight: 500;
  color: #42b983;
  word-break: break-all;
}

.output-format {
  font-size: 10px;
  margin-top: 3px;
}
</style>



Dateiname: Nodes\PromptNode.vue
<!--<script setup>-->
<!--import { ref, computed, onMounted, watch } from 'vue';-->
<!--import { Handle, Position } from '@vue-flow/core';-->

<!--// Props receiving data from the workflow editor-->
<!--const props = defineProps({-->
<!--  id: {-->
<!--    type: String,-->
<!--    required: true-->
<!--  },-->
<!--  data: {-->
<!--    type: Object,-->
<!--    required: true-->
<!--  },-->
<!--  selected: {-->
<!--    type: Boolean,-->
<!--    default: false-->
<!--  },-->
<!--  isConnectable: {-->
<!--    type: Boolean,-->
<!--    default: true-->
<!--  },-->
<!--  prompts: {-->
<!--    type: Array,-->
<!--    default: () => []-->
<!--  }-->
<!--});-->

<!--// Zugriff auf die Prompts, die im data-Objekt Ã¼bergeben werden-->
<!--const promptsList = computed(() => {-->
<!--  console.log("VerfÃ¼gbare Prompts:", props.prompts);-->
<!--  return props.prompts || [];-->
<!--});-->


<!--// Node configuration-->
<!--const config = ref({-->
<!--  showSettings: false,-->
<!--  availableProviders: [-->
<!--    { value: 'openai', label: 'OpenAI' },-->
<!--    { value: 'anthropic', label: 'Anthropic' },-->
<!--    { value: 'google', label: 'Google' },-->
<!--    { value: 'ollama', label: 'Ollama (Local)' },-->
<!--  ],-->
<!--  availableModels: {-->
<!--    openai: [-->
<!--      { value: 'gpt-4-turbo', label: 'GPT-4 Turbo' },-->
<!--      { value: 'gpt-4', label: 'GPT-4' },-->
<!--      { value: 'gpt-3.5-turbo', label: 'GPT-3.5 Turbo' }-->
<!--    ],-->
<!--    anthropic: [-->
<!--      { value: 'claude-3-opus', label: 'Claude 3 Opus' },-->
<!--      { value: 'claude-3-sonnet', label: 'Claude 3 Sonnet' },-->
<!--      { value: 'claude-3-haiku', label: 'Claude 3 Haiku' }-->
<!--    ],-->
<!--    google: [-->
<!--      { value: 'gemini-pro', label: 'Gemini Pro' },-->
<!--      { value: 'gemini-ultra', label: 'Gemini Ultra' }-->
<!--    ],-->
<!--    ollama: [-->
<!--      { value: 'llama3', label: 'Llama 3' },-->
<!--      { value: 'mistral', label: 'Mistral' },-->
<!--      { value: 'mixtral', label: 'Mixtral' }-->
<!--    ]-->
<!--  }-->
<!--});-->

<!--// Emit-Funktion, um Ã„nderungen an den Workflow-Editor zu senden-->
<!--const emit = defineEmits(['update:data']);-->

<!--// Lokale Kopie der Node-Daten, um direkte Bindung zu ermÃ¶glichen-->
<!--const nodeData = ref({-->
<!--  prompt_id: props.data.prompt_id || null,-->
<!--  content: props.data.content || '',-->
<!--  provider: props.data.provider || 'openai',-->
<!--  model: props.data.model || 'gpt-4-turbo',-->
<!--  temperature: parseFloat(props.data.temperature || 0.7),-->
<!--  max_tokens: parseInt(props.data.max_tokens || 1000),-->
<!--  output_variable: props.data.output_variable || 'result'-->
<!--});-->

<!--// Prompt selection state-->
<!--const useSavedPrompt = ref(props.data.prompt.id !== null);-->
<!--const selectedPromptId = ref(props.data.prompt_id || '');-->

<!--// Get models based on selected provider-->
<!--const availableModels = computed(() => {-->
<!--  return config.value.availableModels[nodeData.value.provider] || [];-->
<!--});-->

<!--// Computed property fÃ¼r den ausgewÃ¤hlten Prompt-->
<!--const selectedPromptContent = computed(() => {-->
<!--  if (!selectedPromptId.value) return '';-->

<!--  const selectedPrompt = promptsList.value.find(p => p.id == selectedPromptId.value);-->
<!--  console.log("Selected prompt:", selectedPrompt);-->
<!--  return selectedPrompt ? selectedPrompt.content : '';-->
<!--});-->

<!--// Toggle settings panel-->
<!--const toggleSettings = (event) => {-->
<!--  // Verhindere Event-Bubbling, damit der Node nicht verschoben wird-->
<!--  event.stopPropagation();-->
<!--  config.value.showSettings = !config.value.showSettings;-->
<!--};-->

<!--// Update node data-->
<!--const updateNodeData = (key, value) => {-->
<!--  // Aktualisiere die lokale Kopie-->
<!--  nodeData.value[key] = value;-->

<!--  // Sendet die aktualisierten Daten an den Ã¼bergeordneten Workflow-Editor-->
<!--  emit('update:data', { ...props.data, [key]: value });-->
<!--};-->

<!--// When provider changes, update model to the first available model-->
<!--const onProviderChange = (provider) => {-->
<!--  updateNodeData('provider', provider);-->

<!--  const models = config.value.availableModels[provider] || [];-->
<!--  if (models.length > 0) {-->
<!--    updateNodeData('model', models[0].value);-->
<!--  }-->
<!--};-->

<!--// Method to select a prompt-->
<!--const selectPrompt = () => {-->
<!--  updateNodeData('prompt_id', selectedPromptId.value);-->

<!--  // If there's a selected prompt, fetch its content-->
<!--  if (selectedPromptId.value) {-->
<!--    const selectedPrompt = promptsList.value.find(p => p.id == selectedPromptId.value);-->
<!--    if (selectedPrompt) {-->
<!--      updateNodeData('content', selectedPrompt.content);-->
<!--    }-->
<!--  }-->
<!--};-->

<!--// Methode fÃ¼r Temperatur-Ã„nderung-->
<!--const onTemperatureChange = (event) => {-->
<!--  const value = parseFloat(event.target.value);-->
<!--  updateNodeData('temperature', value);-->
<!--};-->

<!--// Watch for changes in the useSavedPrompt value-->
<!--watch(useSavedPrompt, (newValue) => {-->
<!--  if (!newValue) {-->
<!--    // If switching to custom prompt, clear the prompt_id-->
<!--    updateNodeData('prompt_id', null);-->
<!--  } else {-->
<!--    // If switching to saved prompt, but no prompt selected yet-->
<!--    if (!selectedPromptId.value && promptsList.value.length > 0) {-->
<!--      // Pre-select the first prompt-->
<!--      selectedPromptId.value = promptsList.value[0].id;-->
<!--      selectPrompt();-->
<!--    }-->
<!--  }-->
<!--});-->

<!--// Initialisierung und Laden des Prompt-Inhalts, wenn ein Prompt-ID existiert-->
<!--onMounted(() => {-->
<!--  console.log("Node mounted. Available prompts:", promptsList.value);-->
<!--  if (props.data.prompt_id) {-->
<!--    selectedPromptId.value = props.data.prompt_id;-->
<!--    const selectedPrompt = promptsList.value.find(p => p.id == props.data.prompt_id);-->
<!--    if (selectedPrompt) {-->
<!--      updateNodeData('content', selectedPrompt.content);-->
<!--    }-->
<!--  }-->
<!--});-->

<!--// Watch fÃ¼r Ã„nderungen an der Prompt-Auswahl-->
<!--watch(selectedPromptId, (newValue) => {-->
<!--  if (newValue) {-->
<!--    selectPrompt();-->
<!--  }-->
<!--});-->

<!--// Watch fÃ¼r Ã„nderungen an den verfÃ¼gbaren Prompts (falls diese nachgeladen werden)-->
<!--watch(promptsList, (newPrompts) => {-->
<!--  console.log("Prompts list changed:", newPrompts);-->
<!--  if (selectedPromptId.value) {-->
<!--    const selectedPrompt = newPrompts.find(p => p.id == selectedPromptId.value);-->
<!--    if (selectedPrompt) {-->
<!--      updateNodeData('content', selectedPrompt.content);-->
<!--    }-->
<!--  }-->
<!--}, { deep: true });-->

<!--// Verhindert Klick-Propagation bei Interaktion mit Steuerelementen-->
<!--const preventDrag = (event) => {-->
<!--  event.stopPropagation();-->
<!--};-->
<!--</script>-->

<!--<template>-->
<!--  <div :class="['prompt-node', { 'selected': selected }]">-->
<!--    &lt;!&ndash; Source Handle (Output) &ndash;&gt;-->
<!--    <Handle-->
<!--      type="source"-->
<!--      position="bottom"-->
<!--      :id="id + '-source'"-->
<!--      :connectable="isConnectable"-->
<!--    />-->

<!--    &lt;!&ndash; Target Handle (Input) &ndash;&gt;-->
<!--    <Handle-->
<!--      type="target"-->
<!--      position="top"-->
<!--      :id="id + '-target'"-->
<!--      :connectable="isConnectable"-->
<!--    />-->

<!--    &lt;!&ndash; Node Content &ndash;&gt;-->
<!--    <div class="prompt-node-content">-->
<!--      <div class="prompt-node-header">-->
<!--        <i class="fa fa-file-alt text-primary me-1"></i>-->
<!--        <span class="prompt-node-label">{{ data.label }}</span>-->
<!--        <button-->
<!--          type="button"-->
<!--          class="prompt-node-toggle"-->
<!--          @click="toggleSettings"-->
<!--          :title="config.showSettings ? 'Hide settings' : 'Show settings'"-->
<!--        >-->
<!--          <i :class="['fa', config.showSettings ? 'fa-chevron-up' : 'fa-chevron-down']"></i>-->
<!--        </button>-->
<!--      </div>-->

<!--      &lt;!&ndash; Setting Panel &ndash;&gt;-->
<!--      <div v-if="config.showSettings" class="prompt-node-settings" @mousedown="preventDrag" @click="preventDrag">-->
<!--        &lt;!&ndash; Debug Info (nur wÃ¤hrend der Entwicklung) &ndash;&gt;-->
<!--        <div class="setting-group bg-light p-2 mb-2">-->
<!--          <small>Debug Info: {{ promptsList.length }} Prompts verfÃ¼gbar</small>-->
<!--        </div>-->

<!--        &lt;!&ndash; Prompt Selection &ndash;&gt;-->
<!--        <div class="setting-group">-->
<!--          <label class="setting-label">Prompt Source</label>-->
<!--          <div class="setting-option">-->
<!--            <div class="form-check">-->
<!--              <input-->
<!--                type="radio"-->
<!--                id="prompt-source-saved"-->
<!--                class="form-check-input"-->
<!--                :value="true"-->
<!--                v-model="useSavedPrompt"-->
<!--              />-->
<!--              <label class="form-check-label" for="prompt-source-saved">-->
<!--                Gespeicherter Prompt-->
<!--              </label>-->
<!--            </div>-->

<!--            &lt;!&ndash; Dropdown fÃ¼r gespeicherte Prompts &ndash;&gt;-->
<!--            <div v-if="useSavedPrompt" class="mt-2">-->
<!--              <select-->
<!--                v-model="selectedPromptId"-->
<!--                class="form-select form-select-sm"-->
<!--              >-->
<!--                <option value="">Prompt auswÃ¤hlen</option>-->
<!--                <option v-for="prompt in promptsList" :key="prompt.id" :value="prompt.id">-->
<!--                  {{ prompt.name }}-->
<!--                </option>-->
<!--              </select>-->
<!--              <div v-if="promptsList.length === 0" class="text-muted small mt-1">-->
<!--                Keine gespeicherten Prompts verfÃ¼gbar-->
<!--              </div>-->
<!--            </div>-->

<!--            &lt;!&ndash; Anzeige des ausgewÃ¤hlten Prompt-Inhalts &ndash;&gt;-->
<!--            <div v-if="useSavedPrompt && selectedPromptId" class="mt-2">-->
<!--              <div class="card p-2 bg-light">-->
<!--                <small class="text-muted">Prompt-Inhalt:</small>-->
<!--                <div class="prompt-preview mt-1">{{ selectedPromptContent }}</div>-->
<!--              </div>-->
<!--            </div>-->

<!--            <div class="form-check mt-2">-->
<!--              <input-->
<!--                type="radio"-->
<!--                id="prompt-source-custom"-->
<!--                class="form-check-input"-->
<!--                :value="false"-->
<!--                v-model="useSavedPrompt"-->
<!--              />-->
<!--              <label class="form-check-label" for="prompt-source-custom">-->
<!--                Benutzerdefinierter Prompt-->
<!--              </label>-->
<!--            </div>-->
<!--          </div>-->
<!--        </div>-->

<!--        &lt;!&ndash; Prompt Content (only visible if custom prompt is selected) &ndash;&gt;-->
<!--        <div v-if="!useSavedPrompt" class="setting-group">-->
<!--          <label class="setting-label" for="prompt-content">Prompt Inhalt</label>-->
<!--          <div class="setting-option">-->
<!--            <textarea-->
<!--              id="prompt-content"-->
<!--              class="form-control"-->
<!--              rows="4"-->
<!--              v-model="nodeData.content"-->
<!--              @input="updateNodeData('content', $event.target.value)"-->
<!--              placeholder="Gib deinen Prompt-Text ein..."-->
<!--            ></textarea>-->
<!--          </div>-->
<!--        </div>-->

<!--        &lt;!&ndash; LLM Provider Selection &ndash;&gt;-->
<!--        <div class="setting-group">-->
<!--          <label class="setting-label" for="prompt-provider">Provider</label>-->
<!--          <div class="setting-option">-->
<!--            <select-->
<!--              id="prompt-provider"-->
<!--              class="form-select form-select-sm"-->
<!--              v-model="nodeData.provider"-->
<!--              @change="onProviderChange($event.target.value)"-->
<!--            >-->
<!--              <option-->
<!--                v-for="provider in config.availableProviders"-->
<!--                :key="provider.value"-->
<!--                :value="provider.value"-->
<!--              >-->
<!--                {{ provider.label }}-->
<!--              </option>-->
<!--            </select>-->
<!--          </div>-->
<!--        </div>-->

<!--        &lt;!&ndash; Model Selection &ndash;&gt;-->
<!--        <div class="setting-group">-->
<!--          <label class="setting-label" for="prompt-model">Model</label>-->
<!--          <div class="setting-option">-->
<!--            <select-->
<!--              id="prompt-model"-->
<!--              class="form-select form-select-sm"-->
<!--              v-model="nodeData.model"-->
<!--              @change="updateNodeData('model', $event.target.value)"-->
<!--            >-->
<!--              <option-->
<!--                v-for="model in availableModels"-->
<!--                :key="model.value"-->
<!--                :value="model.value"-->
<!--              >-->
<!--                {{ model.label }}-->
<!--              </option>-->
<!--            </select>-->
<!--          </div>-->
<!--        </div>-->

<!--        &lt;!&ndash; Temperature Slider &ndash;&gt;-->
<!--        <div class="setting-group">-->
<!--          <label class="setting-label" for="prompt-temperature">-->
<!--            Temperature: {{ nodeData.temperature }}-->
<!--          </label>-->
<!--          <div class="setting-option">-->
<!--            <input-->
<!--              id="prompt-temperature"-->
<!--              type="range"-->
<!--              class="form-range"-->
<!--              min="0"-->
<!--              max="2"-->
<!--              step="0.1"-->
<!--              :value="nodeData.temperature"-->
<!--              @input="onTemperatureChange"-->
<!--              @change="onTemperatureChange"-->
<!--            />-->
<!--          </div>-->
<!--        </div>-->

<!--        &lt;!&ndash; Max Tokens &ndash;&gt;-->
<!--        <div class="setting-group">-->
<!--          <label class="setting-label" for="prompt-max-tokens">Max Tokens</label>-->
<!--          <div class="setting-option">-->
<!--            <input-->
<!--              id="prompt-max-tokens"-->
<!--              type="number"-->
<!--              class="form-control form-control-sm"-->
<!--              v-model="nodeData.max_tokens"-->
<!--              @change="updateNodeData('max_tokens', parseInt($event.target.value))"-->
<!--              min="1"-->
<!--              max="100000"-->
<!--            />-->
<!--          </div>-->
<!--        </div>-->

<!--        &lt;!&ndash; Output Variable &ndash;&gt;-->
<!--        <div class="setting-group">-->
<!--          <label class="setting-label" for="prompt-output-variable">Output Variable</label>-->
<!--          <div class="setting-option">-->
<!--            <input-->
<!--              id="prompt-output-variable"-->
<!--              type="text"-->
<!--              class="form-control form-control-sm"-->
<!--              v-model="nodeData.output_variable"-->
<!--              @change="updateNodeData('output_variable', $event.target.value)"-->
<!--              placeholder="result"-->
<!--            />-->
<!--          </div>-->
<!--        </div>-->
<!--      </div>-->
<!--    </div>-->
<!--  </div>-->
<!--</template>-->

<!--<style scoped>-->
<!--.prompt-node {-->
<!--  padding: 10px;-->
<!--  border-radius: 5px;-->
<!--  background: white;-->
<!--  border: 1px solid #ddd;-->
<!--  width: 250px;-->
<!--  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);-->
<!--}-->

<!--.prompt-node.selected {-->
<!--  border-color: #5e72e4;-->
<!--  box-shadow: 0 0 0 2px rgba(94, 114, 228, 0.3);-->
<!--}-->

<!--.prompt-node-header {-->
<!--  display: flex;-->
<!--  align-items: center;-->
<!--  justify-content: space-between;-->
<!--  margin-bottom: 8px;-->
<!--  font-weight: 600;-->
<!--}-->

<!--.prompt-node-toggle {-->
<!--  background: none;-->
<!--  border: none;-->
<!--  cursor: pointer;-->
<!--  color: #495057;-->
<!--  padding: 2px 5px;-->
<!--}-->

<!--.prompt-node-toggle:hover {-->
<!--  color: #5e72e4;-->
<!--}-->

<!--.prompt-node-settings {-->
<!--  margin-top: 10px;-->
<!--  font-size: 0.85rem;-->
<!--}-->

<!--.setting-group {-->
<!--  margin-bottom: 12px;-->
<!--}-->

<!--.setting-label {-->
<!--  display: block;-->
<!--  margin-bottom: 4px;-->
<!--  color: #495057;-->
<!--  font-weight: 600;-->
<!--  font-size: 0.8rem;-->
<!--}-->

<!--.setting-option {-->
<!--  margin-bottom: 5px;-->
<!--}-->

<!--/* Stilisierung fÃ¼r die Prompt-Vorschau */-->
<!--.prompt-preview {-->
<!--  font-size: 0.8rem;-->
<!--  white-space: pre-wrap;-->
<!--  max-height: 100px;-->
<!--  overflow-y: auto;-->
<!--  background: white;-->
<!--  padding: 5px;-->
<!--  border-radius: 3px;-->
<!--  border: 1px solid #e2e2e2;-->
<!--}-->

<!--/* Make controls not draggable */-->
<!--.prompt-node input,-->
<!--.prompt-node select,-->
<!--.prompt-node textarea,-->
<!--.prompt-node button {-->
<!--  pointer-events: auto;-->
<!--}-->
<!--</style>-->

<script setup>
import { ref, computed, onMounted, watch } from 'vue';
import { Handle, Position } from '@vue-flow/core';

// Props receiving data from the workflow editor
const props = defineProps({
  id: {
    type: String,
    required: true
  },
  data: {
    type: Object,
    required: true
  },
  selected: {
    type: Boolean,
    default: false
  },
  isConnectable: {
    type: Boolean,
    default: true
  },
  prompts: {
    type: Array,
    default: () => []
  }
});

// Emit-Funktion fÃ¼r Datenaktualisierungen
const emit = defineEmits(['update:data']);

// Node-Konfiguration mit verfÃ¼gbaren Providern und Modellen
const config = ref({
  showSettings: false,
  availableProviders: [
    { value: 'openai', label: 'OpenAI' },
    { value: 'anthropic', label: 'Anthropic' },
    { value: 'google', label: 'Google' },
    { value: 'ollama', label: 'Ollama (Local)' },
  ],
  availableModels: {
    openai: [
      { value: 'gpt-4-turbo', label: 'GPT-4 Turbo' },
      { value: 'gpt-4', label: 'GPT-4' },
      { value: 'gpt-3.5-turbo', label: 'GPT-3.5 Turbo' }
    ],
    anthropic: [
      { value: 'claude-3-opus', label: 'Claude 3 Opus' },
      { value: 'claude-3-sonnet', label: 'Claude 3 Sonnet' },
      { value: 'claude-3-haiku', label: 'Claude 3 Haiku' }
    ],
    google: [
      { value: 'gemini-pro', label: 'Gemini Pro' },
      { value: 'gemini-ultra', label: 'Gemini Ultra' }
    ],
    ollama: [
      { value: 'llama3', label: 'Llama 3' },
      { value: 'mistral', label: 'Mistral' },
      { value: 'mixtral', label: 'Mixtral' }
    ]
  }
});

// Initialisierung der Node-Daten mit Defaultwerten aus props
const nodeData = ref({
  prompt_id: props.data.prompt_id || null,
  content: props.data.content || '',
  provider: props.data.provider || 'openai',
  model: props.data.model || 'gpt-4-turbo',
  temperature: parseFloat(props.data.temperature || 0.7),
  max_tokens: parseInt(props.data.max_tokens || 1000),
  output_variable: props.data.output_variable || 'result'
});

// Prompt-Auswahl Status
const useSavedPrompt = ref(Boolean(props.data.prompt_id));
const selectedPromptId = ref(props.data.prompt_id || '');

// VerfÃ¼gbare Modelle basierend auf dem ausgewÃ¤hlten Provider
const availableModels = computed(() => {
  return config.value.availableModels[nodeData.value.provider] || [];
});

// Prompt-Inhalt basierend auf der Auswahl
const selectedPromptContent = computed(() => {
  if (!selectedPromptId.value) return '';

  const selectedPrompt = props.prompts.find(p => p.id == selectedPromptId.value);
  return selectedPrompt ? selectedPrompt.content : '';
});

// EinstellungsmenÃ¼ umschalten
const toggleSettings = (event) => {
  event.stopPropagation();
  config.value.showSettings = !config.value.showSettings;
};

// Node-Daten aktualisieren und an Ã¼bergeordnete Komponente senden
const updateNodeData = (key, value) => {
  nodeData.value[key] = value;
  emit('update:data', { ...props.data, [key]: value });
};

// Provider wechseln und Modell aktualisieren
const onProviderChange = (provider) => {
  updateNodeData('provider', provider);

  const models = config.value.availableModels[provider] || [];
  if (models.length > 0) {
    updateNodeData('model', models[0].value);
  }
};

// Prompt auswÃ¤hlen und Inhalt aktualisieren
const selectPrompt = () => {
  updateNodeData('prompt_id', selectedPromptId.value);

  if (selectedPromptId.value) {
    const selectedPrompt = props.prompts.find(p => p.id == selectedPromptId.value);
    if (selectedPrompt) {
      updateNodeData('content', selectedPrompt.content);
    }
  }
};

// Temperatur-Ã„nderung verarbeiten
const onTemperatureChange = (event) => {
  const value = parseFloat(event.target.value);
  updateNodeData('temperature', value);
};

// Ãœberwachen des useSavedPrompt-Werts
watch(useSavedPrompt, (newValue) => {
  if (!newValue) {
    // Bei Wechsel zu benutzerdefiniertem Prompt, prompt_id lÃ¶schen
    updateNodeData('prompt_id', null);
  } else if (props.prompts.length > 0) {
    // Bei Wechsel zu gespeichertem Prompt, ersten Prompt vorauswÃ¤hlen
    if (!selectedPromptId.value) {
      selectedPromptId.value = props.prompts[0].id;
      selectPrompt();
    }
  }
});

// Initialisierung und Laden des Prompt-Inhalts
onMounted(() => {
  if (props.data.prompt_id) {
    selectedPromptId.value = props.data.prompt_id;
    const selectedPrompt = props.prompts.find(p => p.id == props.data.prompt_id);
    if (selectedPrompt) {
      updateNodeData('content', selectedPrompt.content);
    }
  }
});

// Ãœberwachen der Prompt-Auswahl
watch(selectedPromptId, (newValue) => {
  if (newValue) {
    selectPrompt();
  }
});

// Verhindern von Klick-Propagation
const preventDrag = (event) => {
  event.stopPropagation();
};
</script>

<template>
  <div :class="['prompt-node', { 'selected': selected }]">
    <!-- Source Handle (Output) -->
    <Handle
      type="source"
      position="bottom"
      :id="id + '-source'"
      :connectable="isConnectable"
    />

    <!-- Target Handle (Input) -->
    <Handle
      type="target"
      position="top"
      :id="id + '-target'"
      :connectable="isConnectable"
    />

    <!-- Node-Inhalt -->
    <div class="prompt-node-content">
      <div class="prompt-node-header">
        <i class="fa fa-file-alt text-primary me-1"></i>
        <span class="prompt-node-label">{{ data.label }}</span>
        <button
          type="button"
          class="prompt-node-toggle"
          @click="toggleSettings"
          :title="config.showSettings ? 'Einstellungen ausblenden' : 'Einstellungen anzeigen'"
        >
          <i :class="['fa', config.showSettings ? 'fa-chevron-up' : 'fa-chevron-down']"></i>
        </button>
      </div>

      <!-- Einstellungsbereich -->
      <div v-if="config.showSettings" class="prompt-node-settings" @mousedown="preventDrag" @click="preventDrag">
        <!-- Prompt-Auswahl -->
        <div class="setting-group">
          <label class="setting-label">Prompt-Quelle</label>
          <div class="setting-option">
            <div class="form-check">
              <input
                type="radio"
                id="prompt-source-saved"
                class="form-check-input"
                :value="true"
                v-model="useSavedPrompt"
              />
              <label class="form-check-label" for="prompt-source-saved">
                Gespeicherter Prompt
              </label>
            </div>

            <!-- Dropdown fÃ¼r gespeicherte Prompts -->
            <div v-if="useSavedPrompt" class="mt-2">
              <select
                v-model="selectedPromptId"
                class="form-select form-select-sm"
              >
                <option value="">Prompt auswÃ¤hlen</option>
                <option v-for="prompt in prompts" :key="prompt.id" :value="prompt.id">
                  {{ prompt.name }}
                </option>
              </select>
              <div v-if="prompts.length === 0" class="text-muted small mt-1">
                Keine gespeicherten Prompts verfÃ¼gbar
              </div>
            </div>

            <!-- Anzeige des ausgewÃ¤hlten Prompt-Inhalts -->
            <div v-if="useSavedPrompt && selectedPromptId" class="mt-2">
              <div class="card p-2 bg-light">
                <small class="text-muted">Prompt-Inhalt:</small>
                <div class="prompt-preview mt-1">{{ selectedPromptContent }}</div>
              </div>
            </div>

            <div class="form-check mt-2">
              <input
                type="radio"
                id="prompt-source-custom"
                class="form-check-input"
                :value="false"
                v-model="useSavedPrompt"
              />
              <label class="form-check-label" for="prompt-source-custom">
                Benutzerdefinierter Prompt
              </label>
            </div>
          </div>
        </div>

        <!-- Prompt-Inhalt (nur sichtbar bei benutzerdefiniertem Prompt) -->
        <div v-if="!useSavedPrompt" class="setting-group">
          <label class="setting-label" for="prompt-content">Prompt-Inhalt</label>
          <div class="setting-option">
            <textarea
              id="prompt-content"
              class="form-control"
              rows="4"
              v-model="nodeData.content"
              @input="updateNodeData('content', $event.target.value)"
              placeholder="Gib deinen Prompt-Text ein..."
            ></textarea>
          </div>
        </div>

        <!-- LLM Provider-Auswahl -->
        <div class="setting-group">
          <label class="setting-label" for="prompt-provider">Provider</label>
          <div class="setting-option">
            <select
              id="prompt-provider"
              class="form-select form-select-sm"
              v-model="nodeData.provider"
              @change="onProviderChange($event.target.value)"
            >
              <option
                v-for="provider in config.availableProviders"
                :key="provider.value"
                :value="provider.value"
              >
                {{ provider.label }}
              </option>
            </select>
          </div>
        </div>

        <!-- Modell-Auswahl -->
        <div class="setting-group">
          <label class="setting-label" for="prompt-model">Modell</label>
          <div class="setting-option">
            <select
              id="prompt-model"
              class="form-select form-select-sm"
              v-model="nodeData.model"
              @change="updateNodeData('model', $event.target.value)"
            >
              <option
                v-for="model in availableModels"
                :key="model.value"
                :value="model.value"
              >
                {{ model.label }}
              </option>
            </select>
          </div>
        </div>

        <!-- Temperatur-Slider -->
        <div class="setting-group">
          <label class="setting-label" for="prompt-temperature">
            Temperatur: {{ nodeData.temperature }}
          </label>
          <div class="setting-option">
            <input
              id="prompt-temperature"
              type="range"
              class="form-range"
              min="0"
              max="2"
              step="0.1"
              :value="nodeData.temperature"
              @input="onTemperatureChange"
            />
          </div>
        </div>

        <!-- Max Tokens -->
        <div class="setting-group">
          <label class="setting-label" for="prompt-max-tokens">Max Tokens</label>
          <div class="setting-option">
            <input
              id="prompt-max-tokens"
              type="number"
              class="form-control form-control-sm"
              v-model="nodeData.max_tokens"
              @change="updateNodeData('max_tokens', parseInt($event.target.value))"
              min="1"
              max="100000"
            />
          </div>
        </div>

        <!-- Ausgabe-Variable -->
        <div class="setting-group">
          <label class="setting-label" for="prompt-output-variable">Ausgabe-Variable</label>
          <div class="setting-option">
            <input
              id="prompt-output-variable"
              type="text"
              class="form-control form-control-sm"
              v-model="nodeData.output_variable"
              @change="updateNodeData('output_variable', $event.target.value)"
              placeholder="result"
            />
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<style scoped>
.prompt-node {
  padding: 10px;
  border-radius: 5px;
  background: white;
  border: 1px solid #ddd;
  width: 250px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.prompt-node.selected {
  border-color: #5e72e4;
  box-shadow: 0 0 0 2px rgba(94, 114, 228, 0.3);
}

.prompt-node-header {
  display: flex;
  align-items: center;
  justify-content: space-between;
  margin-bottom: 8px;
  font-weight: 600;
}

.prompt-node-toggle {
  background: none;
  border: none;
  cursor: pointer;
  color: #495057;
  padding: 2px 5px;
}

.prompt-node-toggle:hover {
  color: #5e72e4;
}

.prompt-node-settings {
  margin-top: 10px;
  font-size: 0.85rem;
}

.setting-group {
  margin-bottom: 12px;
}

.setting-label {
  display: block;
  margin-bottom: 4px;
  color: #495057;
  font-weight: 600;
  font-size: 0.8rem;
}

.setting-option {
  margin-bottom: 5px;
}

/* Stilisierung fÃ¼r die Prompt-Vorschau */
.prompt-preview {
  font-size: 0.8rem;
  white-space: pre-wrap;
  max-height: 100px;
  overflow-y: auto;
  background: white;
  padding: 5px;
  border-radius: 3px;
  border: 1px solid #e2e2e2;
}

/* Kontrollelemente nicht verschiebbar machen */
.prompt-node input,
.prompt-node select,
.prompt-node textarea,
.prompt-node button {
  pointer-events: auto;
}
</style>



Dateiname: Nodes\TransformNode.vue
// resources/js/views/Pages/Workflows/Nodes/TransformNode.vue
<script setup>
import { ref, computed } from 'vue';
import { Handle, Position, useVueFlow } from '@vue-flow/core';

// Props receiving data from the workflow editor
const props = defineProps({
  id: {
    type: String,
    required: true
  },
  data: {
    type: Object,
    required: true
  },
  selected: {
    type: Boolean,
    default: false
  },
  isConnectable: {
    type: Boolean,
    default: true
  }
});

// Get Vue Flow methods
const { findNode, setNodes, getNodes } = useVueFlow();

// Node configuration
const config = ref({
  showSettings: false,
  transformations: [
    { value: 'json_parse', label: 'Parse JSON' },
    { value: 'json_stringify', label: 'Stringify JSON' },
    { value: 'to_uppercase', label: 'To Uppercase' },
    { value: 'to_lowercase', label: 'To Lowercase' },
    { value: 'trim', label: 'Trim Whitespace' },
    { value: 'extract_text', label: 'Extract Text (Regex)' },
    { value: 'custom_code', label: 'Custom JavaScript' },
  ]
});

// Available variables in the workflow
const availableVariables = computed(() => {
  // Get all nodes in the workflow
  const nodes = getNodes.value;
  const variables = [];

  // Extract variables from nodes
  nodes.forEach(node => {
    if (node.data) {
      // From input nodes
      if (node.data.type === 'input' && node.data.variable) {
        variables.push(node.data.variable);
      }

      // From prompt nodes
      if (node.data.type === 'prompt' && node.data.output_variable) {
        variables.push(node.data.output_variable);
      }

      // From API nodes
      if (node.data.type === 'api' && node.data.output_variable) {
        variables.push(node.data.output_variable);
      }

      // From transform nodes (except this one)
      if (node.data.type === 'transform' && node.data.output_variable && node.id !== props.id) {
        variables.push(node.data.output_variable);
      }
    }
  });

  // Return unique variables
  return [...new Set(variables)];
});

// Toggle settings panel
const toggleSettings = () => {
  config.value.showSettings = !config.value.showSettings;
};

// Update node data
const updateNodeData = (key, value) => {
  const node = findNode(props.id);
  if (!node) return;

  const newNode = {
    ...node,
    data: {
      ...node.data,
      [key]: value
    }
  };

  setNodes((nodes) => nodes.map(n => n.id === props.id ? newNode : n));
};

// Get transformation info
const getTransformationInfo = (transformationType) => {
  const info = config.value.transformations.find(t => t.value === transformationType);
  return info || { value: transformationType, label: transformationType };
};

// Show specific fields based on transformation type
const showRegexField = computed(() => props.data.transformation === 'extract_text');
const showCodeField = computed(() => props.data.transformation === 'custom_code');
</script>

<template>
  <div :class="['transform-node', { 'selected': selected }]">
    <!-- Target Handle (Input) -->
    <Handle
      type="target"
      position="top"
      :id="id + '-target'"
      :connectable="isConnectable"
    />

    <!-- Source Handle (Output) -->
    <Handle
      type="source"
      position="bottom"
      :id="id + '-source'"
      :connectable="isConnectable"
    />

    <!-- Node Content -->
    <div class="transform-node-content">
      <div class="transform-node-header node-drag-handle
">
        <i class="fa fa-exchange-alt text-secondary me-1"></i>
        <span class="transform-node-label">{{ data.label }}</span>
        <button
          type="button"
          class="transform-node-toggle"
          @click="toggleSettings"
          :title="config.showSettings ? 'Hide settings' : 'Show settings'"
        >
          <i :class="['fa', config.showSettings ? 'fa-chevron-up' : 'fa-chevron-down']"></i>
        </button>
      </div>

      <!-- Setting Panel -->
      <div v-if="config.showSettings" class="transform-node-settings">
        <!-- Input Variable -->
        <div class="setting-group">
          <label class="setting-label">Input Variable</label>
          <div class="setting-option">
            <select
              class="form-select form-select-sm"
              v-model="data.input_variable"
              @change="updateNodeData('input_variable', data.input_variable)"
            >
              <option value="">Select input variable</option>
              <option v-for="variable in availableVariables" :key="variable" :value="variable">
                {{ variable }}
              </option>
            </select>
          </div>
          <div class="setting-help">Select the variable to transform</div>
        </div>

        <!-- Transformation Type -->
        <div class="setting-group">
          <label class="setting-label">Transformation</label>
          <div class="setting-option">
            <select
              class="form-select form-select-sm"
              v-model="data.transformation"
              @change="updateNodeData('transformation', data.transformation)"
            >
              <option v-for="transform in config.transformations" :key="transform.value" :value="transform.value">
                {{ transform.label }}
              </option>
            </select>
          </div>
        </div>

        <!-- Regex Pattern (for extract_text) -->
        <div v-if="showRegexField" class="setting-group">
          <label class="setting-label">Regular Expression</label>
          <div class="setting-option">
            <input
              type="text"
              class="form-control form-control-sm"
              v-model="data.regex"
              placeholder="e.g., /pattern(.*?)pattern/i"
              @change="updateNodeData('regex', data.regex)"
            />
          </div>
          <div class="setting-help">Use a capture group () to extract specific text</div>
        </div>

        <!-- Custom Code (for custom_code) -->
        <div v-if="showCodeField" class="setting-group">
          <label class="setting-label">Custom JavaScript</label>
          <div class="setting-option">
            <textarea
              class="form-control form-control-sm"
              v-model="data.code"
              rows="4"
              placeholder="// input contains the variable value
// return the transformed result
return input.toString();"
              @change="updateNodeData('code', data.code)"
            ></textarea>
          </div>
          <div class="setting-help">Write JavaScript code to transform the input value</div>
        </div>

        <!-- Output Variable -->
        <div class="setting-group">
          <label class="setting-label">Output Variable</label>
          <div class="setting-option">
            <input
              type="text"
              class="form-control form-control-sm"
              v-model="data.output_variable"
              placeholder="transformed_result"
              @change="updateNodeData('output_variable', data.output_variable)"
            />
          </div>
          <div class="setting-help">Variable name to store the transformation result</div>
        </div>
      </div>

      <!-- Node Summary (when collapsed) -->
      <div v-else class="transform-node-summary">
        <div class="transform-flow">
          <span class="transform-input">{{ data.input_variable || '?' }}</span>
          <span class="transform-arrow">â†’</span>
          <span class="transform-type">{{ getTransformationInfo(data.transformation).label }}</span>
          <span class="transform-arrow">â†’</span>
          <span class="transform-output">{{ data.output_variable || '?' }}</span>
        </div>

        <div v-if="showRegexField" class="transform-details">
          Regex: {{ data.regex || 'Not set' }}
        </div>

        <div v-if="showCodeField" class="transform-details">
          Custom code: {{ data.code ? 'Set' : 'Not set' }}
        </div>
      </div>
    </div>
  </div>
</template>

<style scoped>
.transform-node {
  min-width: 220px;
  max-width: 280px;
  background-color: #ffffff;
  border: 2px solid #6c757d;
  border-radius: 5px;
  font-size: 12px;
  overflow: hidden;
}

.transform-node.selected {
  box-shadow: 0 0 0 2px #6c757d;
}

.transform-node-content {
  padding: 5px;
}

.transform-node-header {
  display: flex;
  align-items: center;
  font-weight: bold;
  padding: 4px;
  background-color: rgba(108, 117, 125, 0.1);
  border-bottom: 1px solid rgba(108, 117, 125, 0.2);
}

.transform-node-label {
  flex-grow: 1;
  margin-right: 5px;
}

.transform-node-toggle {
  background: none;
  border: none;
  cursor: pointer;
  padding: 0;
  width: 16px;
  height: 16px;
  display: flex;
  align-items: center;
  justify-content: center;
  color: #6c757d;
}

.transform-node-settings {
  padding: 8px;
  font-size: 11px;
}

.setting-group {
  margin-bottom: 8px;
}

.setting-label {
  font-weight: 600;
  margin-bottom: 2px;
  font-size: 10px;
  text-transform: uppercase;
  color: #6c757d;
}

.setting-option {
  margin-bottom: 2px;
}

.setting-help {
  font-size: 10px;
  color: #6c757d;
  font-style: italic;
}

.transform-node-summary {
  padding: 5px;
  font-size: 11px;
}

.transform-flow {
  display: flex;
  align-items: center;
  justify-content: space-between;
  margin-bottom: 4px;
}

.transform-input,
.transform-output {
  font-weight: 500;
  color: #6c757d;
  overflow: hidden;
  text-overflow: ellipsis;
  max-width: 60px;
}

.transform-arrow {
  color: #adb5bd;
  font-size: 10px;
}

.transform-type {
  background-color: rgba(108, 117, 125, 0.1);
  color: #6c757d;
  font-size: 10px;
  padding: 1px 4px;
  border-radius: 3px;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  max-width: 80px;
  text-align: center;
}

.transform-details {
  font-size: 10px;
  color: #6c757d;
  margin-top: 4px;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  font-style: italic;
}
</style>



